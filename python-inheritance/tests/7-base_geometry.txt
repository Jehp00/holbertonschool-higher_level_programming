=============================
The ``7-base_geometry`` module
=============================

Using ``BaseGeometry``
---------------------

Import the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:
    >>> BaseG = BaseGeometry()

    >>> BaseG.integer_validator("My_numb", 2)

    >>> BaseG.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> BaseG.integer_validator("age", "Seventeen")
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> BaseG.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> BaseG.integer_validator("age", -12)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> BaseG.integer_validator("speed", 9.8)
    Traceback (most recent call last):
    TypeError: speed must be an integer

    >>> BaseG.integer_validator("NaN", float('nan'))
    Traceback (most recent call last):
    TypeError: NaN must be an integer

    >>> BaseG.integer_validator("Big", 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

    >>> BaseG.integer_validator("age", (4,))
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> BaseG.integer_validator("age", [3])
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> BaseG.integer_validator("age", True)
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> BaseG.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> BaseG.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer